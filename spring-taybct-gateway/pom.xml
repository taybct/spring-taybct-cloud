<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <groupId>io.github.taybct</groupId>
        <artifactId>spring-taybct</artifactId>
        <version>3.5.0</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <groupId>io.github.taybct</groupId>
    <artifactId>spring-taybct-gateway</artifactId>
    <version>3.5.0</version>
    <name>${project.artifactId}</name>
    <packaging>jar</packaging>
    <description>网关-运行</description>
    <url>https://github.com/taybct/spring-taybct</url>

    <licenses>
        <license>
            <name>The Apache Software License, Version 2.0</name>
            <url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
        </license>
    </licenses>

    <organization>
        <name>io.github.taybct</name>
        <url>https://github.com/taybct</url>
    </organization>

    <developers>
        <developer>
            <id>crisp</id>
            <name>Mango Crisp</name>
            <email>15014633363@163.com</email>
            <url>https://mangocrisp.github.io</url>
            <roles>
                <role>Project Manager</role>
                <role>Architect</role>
            </roles>
            <organization>io.github.taybct</organization>
            <organizationUrl>https://github.com/taybct</organizationUrl>
            <timezone>Asia/Shanghai</timezone>
        </developer>
    </developers>

    <scm>
        <connection>scm:git:https://github.com/taybct/spring-taybct.git</connection>
        <developerConnection>scm:git:https://github.com/taybct/spring-taybct.git</developerConnection>
        <url>https://github.com/taybct/spring-taybct</url>
    </scm>

    <properties>
        <maven.compiler.source>21</maven.compiler.source>
        <maven.compiler.target>21</maven.compiler.target>
        <maven.compiler.release>21</maven.compiler.release>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>

        <!--公共基础模块-->
        <dependency>
            <groupId>io.github.taybct</groupId>
            <artifactId>spring-taybct-tool-core</artifactId>
            <version>${project.version}</version>
        </dependency>

        <!--启动模块-->
        <dependency>
            <groupId>io.github.taybct</groupId>
            <artifactId>spring-taybct-tool-launch</artifactId>
            <version>${project.version}</version>
        </dependency>

        <!-- SpringCloud Gateway WebFlux -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-gateway-server-webflux</artifactId>
            <version>${spring-cloud-build.version}</version>
        </dependency>

        <!--因为 spring-cloud-gateway-server-webflux 里面的 spring-boot-starter-webflux 是 <optional>true</optional> 可选的，依赖没进来，需要自己再引入-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-webflux</artifactId>
            <version>${spring-boot.version}</version>
        </dependency>

        <!-- OAuth2资源服务器-->
        <!--security-->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-config</artifactId>
            <version>${spring-security-core.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-oauth2-resource-server</artifactId>
            <version>${spring-security-core.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-oauth2-client</artifactId>
            <version>${spring-security-core.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-oauth2-jose</artifactId>
            <version>${spring-security-core.version}</version>
        </dependency>

        <!-- spring 客户端负载均衡器 -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-loadbalancer</artifactId>
            <version>${spring-cloud-build.version}</version>
        </dependency>

        <!-- SpringCloud Alibaba Nacos -->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
            <version>${spring-cloud-alibaba.version}</version>
        </dependency>
        <!-- SpringCloud Alibaba Nacos Config -->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>
            <version>${spring-cloud-alibaba.version}</version>
        </dependency>
        <!--dubbo nacos 注册中心-->
        <dependency>
            <artifactId>nacos-client</artifactId>
            <groupId>com.alibaba.nacos</groupId>
            <version>${nacos-client.version}</version>
        </dependency>

        <!-- Sentinel流量控制、熔断降级 -->
        <!--sentinel gateway-->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-alibaba-sentinel-gateway</artifactId>
            <version>${spring-cloud-alibaba.version}</version>
        </dependency>
        <!-- SpringCloud Alibaba Sentinel -->
        <dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-sentinel</artifactId>
            <version>${spring-cloud-alibaba.version}</version>
            <!--排除自带的 fastjson 与 nacos 的 fastjson 冲突 解决 nacos 配置 sentinel 规则不生效的问题-->
            <exclusions>
                <exclusion>
                    <groupId>com.alibaba.fastjson2</groupId>
                    <artifactId>fastjson2</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!--让 sentinel 的配置可以从 nacos 上拿-->
        <dependency>
            <groupId>com.alibaba.csp</groupId>
            <artifactId>sentinel-datasource-nacos</artifactId>
            <version>${sentinel-datasource-nacos.version}</version>
        </dependency>

        <!--Sentinel网关限流规则会转换为热点规则 天坑呀！-->
        <!--<dependency>
            <groupId>com.alibaba.csp</groupId>
            <artifactId>sentinel-parameter-flow-control</artifactId>
        </dependency>-->

        <!--Redis-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
            <version>${spring-boot.version}</version>
        </dependency>

        <dependency>
            <groupId>com.nimbusds</groupId>
            <artifactId>nimbus-jose-jwt</artifactId>
            <version>${nimbus-jose-jwt.version}</version>
        </dependency>

        <!--公共模块（偏业务）-->
        <dependency>
            <groupId>io.github.taybct</groupId>
            <artifactId>spring-taybct-common</artifactId>
            <version>${project.version}</version>
        </dependency>

        <!-- knife4j 集成 springdoc-openapi Gateway网关聚合-->
        <dependency>
            <groupId>com.github.xiaoymin</groupId>
            <artifactId>knife4j-gateway-spring-boot-starter</artifactId>
            <version>${knife4j.version}</version>
        </dependency>

        <!-- SpringBoot Actuator 端点通过 JMX 和HTTP 公开暴露给外界访问-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
            <version>${spring-boot.version}</version>
        </dependency>

        <!-- SpringBoot Admin Client 客户端 -->
        <dependency>
            <groupId>de.codecentric</groupId>
            <artifactId>spring-boot-admin-starter-client</artifactId>
            <version>${spring-boot-admin.version}</version>
        </dependency>

    </dependencies>

    <build>
        <finalName>${project.artifactId}-${project.version}</finalName>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>
                                <!--suppress UnresolvedMavenProperty -->
                                <copy overwrite="true"
                                      tofile="${maven.multiModuleProjectDirectory}/target/${project.build.finalName}.jar"
                                      file="${project.build.directory}/${project.build.finalName}.jar"/>
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- 构建和推动Docker镜像 -->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>dockerfile-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>default</id>
                        <goals>
                            <!--如果package时不想用docker打包,就注释掉这个goal-->
                            <goal>build</goal>
                            <goal>push</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <tag>${project.version}</tag>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>